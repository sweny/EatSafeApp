var request = require("request");
var mysql = require("mysql");
var connection = mysql.createConnection({
	host	:'localhost',
	user	:'root',
	password:'root',
	database:'eatsafeapp'
});
var MongoClient = require('mongodb').MongoClient, format = require('util').format;
var allergy_ingredients = null;
var allergy = null;
var ingredients = null;
var medical_condition = null;
var notificationMessage = null;

//https://api.nutritionix.com/v1_1/item?upc=49000036756&appId=[YOURID]&appKey=[YOURKEY];
//curl -v  -X GET "https://api.nutritionix.com/v1_1/item?upc=52200004265&appId=e859ad7e&appKey=c6e37a4aaa1592dc5cc3dea8675ff078"

exports.upcDecoder = function(upcCode, username, callback) {
	console.log("in upcDecoder func upcCode: "+upcCode);
	console.log ("username in parent "+username);
	var baseURL = 'https://api.nutritionix.com/v1_1/item?upc=';
	var app_Id = 'e859ad7e';
	var app_Key = 'c6e37a4aaa1592dc5cc3dea8675ff078';
	var url = baseURL + upcCode + '&appId='+ app_Id+"&appKey="+app_Key
	console.log("URL created : "+url);
	request({
			uri: url,
			method : 'GET',
	}, function(error, response, body)
			{
				console.log(" data is "+body);	
				var data = JSON.parse(body);
<<<<<<< HEAD
				if (!data.status_code && data.nf_ingredient_statement != null){
					
					ingredients = data.nf_ingredient_statement;						
=======
				if (!data.status_code){
				    MongoClient.connect('mongodb://127.0.0.1:27017/test', function(err, db) {
                        if(err) throw err;
                        console.log('successfully connected to the database');
                        var collection = db.collection('eatSafedb');

                        var doc1 = {userID:username,
                        UpcCode:upcCode,
                        Item_Name:data.item_name,
                        Ing_Stat:data.nf_ingredient_statement,
                        Nutrients:{Water:data.nf_water_grams, Calories:data.nf_calories, Calories_From_Fat:data.nf_calories_from_fat, Total_Fat:data.nf_total_fat, Saturated_Fat:data.nf_saturated_fat, Trans_Fatty_Acid:data.nf_trans_fatty_acid, PolyUnsaturated_Fat:data.nf_polyunsaturated_fat, MonoUnsaturated_Fat:data.nf_monounsaturated_fat, Cholesterol:data.nf_cholesterol, Sodium:data.nf_sodium, Carbohydrates:data.nf_total_carbohydrate, Dietary_Fiber:data.nf_dietary_fiber, Sugar:data.nf_sugars, Protein:data.nf_protein, Vitamin_A:data.nf_vitamin_a_dv, Vitamin_C:data.nf_vitamin_c_dv, Calcium:data.nf_calcium_dv, Iron:data.nf_iron_dv},
                        Allergens:{Milk:data.allergen_contains_milk, Eggs:data.allergen_contains_eggs, Fish:data.allergen_contains_fish, Shellfish:data.allergen_contains_shellfish, Treenuts:data.allergen_contains_tree_nuts, Peanuts:data.allergen_contains_peanuts, Wheat:data.allergen_contains_wheat, Soybean:data.allergen_contains_soybeans, Gluten:data.allergen_contains_gluten},
                        Image:null,
                        Refuse_PCT:data.nf_refuse_pct,
                        Servings_per_container:data.nf_servings_per_container,
                        Serving_size_qty:data.nf_serving_size_qty,
                        Serving_size_unit:data.nf_serving_size_unit,
                        Serving_weight_grams:data.nf_serving_weight_grams,
                        USDA:data.usda_fields
                        };
                        console.log('here '+ collection);
                        collection.insert(doc1);
                    });
					ingredients = data.nf_ingredient_statement;							
>>>>>>> origin/master
					connection.connect();
					connection.beginTransaction(function(err) {
						if (err) { 
							console.log(err);
							throw err; 
							}
						
						
						var sql    = 'SELECT allergy, medical_condition FROM ehr_user_data WHERE user_id = ' + connection.escape(username);			
						connection.query(sql, function(err, results) {
							console.log("err = "+err);												
							if (results.length == 0) {	
								callback({'response':"You can consume the product.", 'res':true});
							} else {
								medical_condition = results[0].medical_condition;
								allergy = results[0].allergy;
								allergy_ingredients = allergy.toString().split(",");
								medical_condition = "%"+medical_condition+"%";
								var sql1 = 'SELECT reason_to_avoid, foot_item_name FROM avoidable_food_items WHERE keywords like '+connection.escape(medical_condition);
								connection.query(sql1, function(err, results) {
									console.log("err in sql1 = "+err);	
									for (var i=0; i<results.length; i++){	
										console.log("results[i].foot_item_name : "+results[i].foot_item_name);
										foodItems = results[i].foot_item_name.split(",");
										for (k in foodItems){
											if (ingredients.toString().indexOf(foodItems[k]) > -1){
												console.log("inside if sql1 = "+err);
												notificationMessage = "This product contains "+foodItems[k]+" and should be avoided because "+results[i].reason_to_avoid+". ";
												for (j in allergy_ingredients){	
													console.log("results[i].allergy_ingredients : "+allergy_ingredients[j]);
													if(ingredients.toString().indexOf(allergy_ingredients[j]) > -1) {
														notificationMessage = notificationMessage + " This product contains "+allergy_ingredients[j]+" that you are allergic to!"
														callback({'response':notificationMessage, 'res':true});
													}
												}
												console.log("outside if sql1 = "+err);
												callback({'response':notificationMessage, 'res':true});
											} 
										}

									}									
									for (j in allergy_ingredients){	
										console.log("results[i].allergy_ingredients : "+allergy_ingredients[j]);
										if(ingredients.toString().indexOf(allergy_ingredients[j]) > -1) {
											notificationMessage = notificationMessage + " This product contains "+allergy_ingredients[j]+" that you are allergic to!"
											callback({'response':notificationMessage, 'res':true});
										}
									}									
									callback({'response':"You can consume the product.", 'res':true});								
								});													
							}
						});			
					});
				} else {
					if (!data.status_code && data.nf_ingredient_statement == null) {
						callback({'response':"Ingredients of "+data.item_name+" not found in database.", 'res':true});
					}
					callback({'response':"Item not found in database!", 'res':true});
				}				
		});
}